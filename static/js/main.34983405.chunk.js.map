{"version":3,"sources":["state/actions/types.ts","logo.svg","components/shared/input/Input.tsx","components/shared/counter/Counter.tsx","components/shared/formikAdapters/FormikInput.tsx","state/actions/hotels.ts","state/selectors/hotels.ts","utils/validation-schemas.ts","pages/NotFound/NotFound.tsx","App.tsx","reportWebVitals.ts","state/reducers/productsReducer.ts","state/reducers/hotelsReducer.ts","state/sagas/hotels.ts","state/sagas/index.ts","state/store.ts","index.tsx","api/axios.ts","api/auth/index.ts","api/hotels/index.ts","api/auth/endpoints.ts","api/hotels/endpoints.ts"],"names":["HotelsType","Input","label","error","props","Counter","useState","result","setResult","changeResult","delta","prev","onClick","role","FormikInput","useField","name","field","meta","touched","undefined","ADD_PRODUCTS","allHotelsSelector","state","hotels","UserFormSchema","Yup","shape","firstName","min","max","required","lastName","email","defaultValues","NotFound","dispatch","useDispatch","hotelsData","useSelector","console","log","login","a","loginUser","password","res","data","access_token","refresh_token","localStorage","setItem","useEffect","type","GET_ALL_REQUEST","hotel","description","phone","address","country","city","street","address1","address2","zip","location","latitude","longtitude","ADD_HOTEL_REQUEST","payload","registerUser","initialValues","validationSchema","onSubmit","val","App","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","products","id","loading","items","itemsCount","total","loadHotels","watchLoadHotels","addHotel","watchAddHotel","call","getHotels","response","put","GET_ALL_SUCCESS","takeLatest","postHotel","ok","ADD_HOTEL_SUCCESS","objectId","all","hotelsSaga","sagaMiddleWare","createSagaMiddleware","rootReducer","combineReducers","action","Types","GET_ALL_FAIL","store","createStore","applyMiddleware","run","rootSaga","ReactDOM","render","StrictMode","document","getElementById","instance","axios","create","baseURL","interceptors","request","use","req","token","getItem","headers","Authorization","err","status","window","replace","Promise","reject","body","Axios","post","get"],"mappings":"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","file":"static/js/main.34983405.chunk.js","sourcesContent":["export const ADD_PRODUCTS = 'ADD_PRODUCTS';\n\nexport enum HotelsType {\n  GET_ALL_REQUEST = 'GET_ALL_REQUEST',\n  GET_ALL_SUCCESS = 'GET_ALL_SUCCESS',\n  GET_ALL_FAIL = 'GET_ALL_FAIL',\n\n  ADD_HOTEL_REQUEST = 'ADD_HOTEL_REQUEST',\n  ADD_HOTEL_SUCCESS = 'ADD_HOTEL_SUCCESS',\n  ADD_HOTEL_FAIL = 'ADD_HOTEL_FAIL'\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { FormikInput, InputProps } from '../../../models/formik';\n\nexport interface FormikTextInputProps extends FormikInput<InputProps> {\n  type?: 'number' | 'text' | 'email';\n\n  onBlur?: (e: React.FocusEvent<Element>) => void;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value?: string;\n}\n\nexport const Input = ({ label, error, ...props }: FormikTextInputProps) => {\n  return (\n    <div>\n      <label>\n        <span>{label}</span>\n        <input {...props} />\n        {error && <div>{error}</div>}\n      </label>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nexport const Counter = () => {\n  const [result, setResult] = useState(0);\n\n  const changeResult = (delta: number) => {\n    setResult(prev => prev + delta);\n  };\n\n  return (\n    <div>\n      <button onClick={() => changeResult(1)}>Add</button>\n      <div role='result'>{result}</div>\n      <button onClick={() => changeResult(-1)}>Remove</button>\n    </div>\n  );\n};\n","import { useField } from 'formik';\nimport React from 'react';\nimport { FormikTextInputProps, Input } from '../input';\n\nexport const FormikInput = (props: FormikTextInputProps) => {\n  const [field, meta] = useField(props.name);\n  const error = meta.touched ? meta.error : undefined;\n\n  return <Input {...field} {...props} error={error} />;\n};\n","import { getHotels, Hotel, postHotel } from '../../api/hotels';\nimport { HotelsType } from './types';\n\nexport const loadHotels = () => ({\n  type: HotelsType.GET_ALL_REQUEST\n});\n\n// export const loadHotels = () => async (dispatch: any) => {\n//   dispatch({\n//     type: HotelsType.GET_ALL_REQUEST,\n//   });\n\n//   try {\n//     const res = await getHotels();\n\n//     dispatch({\n//       type: HotelsType.GET_ALL_SUCCESS,\n//       payload: res.data\n//     });\n\n//   } catch (err) {\n//     dispatch({\n//       type: HotelsType.GET_ALL_FAIL,\n//       payload: err\n//     });\n//   }\n// }\n\nexport const createHotel = (hotel: Hotel) => ({\n  type: HotelsType.ADD_HOTEL_REQUEST,\n  payload: hotel\n});\n// export const createHotel = (hotel: Hotel) => async (dispatch: any) => {\n//   dispatch({\n//     type: HotelsType.ADD_HOTEL_REQUEST,\n//   });\n\n//   try {\n//     const res = await postHotel(hotel);\n\n//     dispatch({\n//       type: HotelsType.ADD_HOTEL_SUCCESS,\n//       payload: {\n//         ...hotel,\n//         id: res.data.objectId\n//       }\n//     });\n\n//   } catch (err) {\n//     dispatch({\n//       type: HotelsType.ADD_HOTEL_FAIL,\n//       payload: err\n//     });\n//   }\n// }\n","import { AppState } from '../store';\n\nexport const allHotelsSelector = (state: AppState) => state.hotels;\n","import * as Yup from 'yup';\n\nexport const UserFormSchema = Yup.object().shape({\n  firstName: Yup.string().min(3, 'Minimum 3 chars').max(10, 'Maximum 10 chars').required(),\n  lastName: Yup.string().min(3, 'Minimum 3 chars').max(10, 'Maximum 10 chars').required(),\n  email: Yup.string().email('Invalid email').required()\n});\n","import { Form, Formik } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Category, deleteCategory, getCategories, postCategory } from '../../api';\nimport { loginUser, registerUser } from '../../api/auth';\nimport { Counter } from '../../components/shared';\nimport { FormikInput } from '../../components/shared/formikAdapters';\nimport { useHotels } from '../../hooks/hotels/useHotels';\nimport { createHotel, loadHotels } from '../../state/actions/hotels';\nimport { allHotelsSelector } from '../../state/selectors/hotels';\nimport { UserFormSchema } from '../../utils/validation-schemas';\n\ninterface UserFormValues {\n  firstName: string;\n  lastName: string;\n  email: string;\n}\n\nconst defaultValues: UserFormValues = {\n  firstName: '',\n  lastName: '',\n  email: ''\n};\n\nexport const NotFound = () => {\n  const dispatch = useDispatch();\n\n  const hotelsData = useSelector(allHotelsSelector);\n\n  const createUser = () => {\n    registerUser({\n      email: 'd.das@ads.dd',\n      firstName: 'fdsdf',\n      lastName: 'dfgdfgdfg',\n      password: 'Aa123456'\n    });\n  };\n\n  console.log(hotelsData);\n\n  const login = async () => {\n    try {\n      const res = await loginUser({\n        email: 'd.das@ads.dd',\n        password: 'Aa123456'\n      });\n\n      const { access_token, refresh_token } = res.data;\n      localStorage.setItem('token', access_token);\n      localStorage.setItem('refresh_token', refresh_token);\n\n      console.log(res.data);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    dispatch(loadHotels());\n  }, []);\n\n  // const { data, addHotel } = useHotels();\n  // console.log(data);\n\n  const createHotel1 = () => {\n    dispatch(\n      createHotel({\n        name: 'aaadadkbkjbbjkbjkbjkjkb---',\n        description: 'aaa',\n        phone: '38080664479770',\n        address: {\n          country: 'aaa',\n          city: 'aaa',\n          state: 'aaa',\n          street: 'aaa',\n          address1: 'aaa',\n          address2: 'aaa',\n          zip: 0,\n          location: {\n            latitude: '0',\n            longtitude: '0'\n          }\n        }\n      })\n    );\n    // addHotel({\n    //   name: 'aaadad',\n    //   description: 'aaa',\n    //   phone: '38080664479770',\n    //   address: {\n    //     country: 'aaa',\n    //     city: 'aaa',\n    //     state: 'aaa',\n    //     street: 'aaa',\n    //     address1: 'aaa',\n    //     address2: 'aaa',\n    //     zip: 0,\n    //     location: {\n    //       latitude: '0',\n    //       longtitude: '0'\n    //     }\n    //   }\n    // })\n  };\n  return (\n    <div>\n      <Counter />\n\n      <button onClick={createHotel1}>Create hotel</button>\n      <button onClick={createUser}>Register</button>\n      <button onClick={login}>Login</button>\n      <Formik\n        initialValues={defaultValues}\n        validationSchema={UserFormSchema}\n        onSubmit={val => {\n          console.log(val);\n        }}\n      >\n        <Form>\n          <FormikInput name='firstName' label='First Name' />\n          <FormikInput name='lastName' label='Last Name' />\n          <FormikInput name='email' label='Email' />\n\n          <button>Send</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { NotFound } from './pages/NotFound';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <NotFound />\n        <img src={logo} className='App-logo' alt='logo' />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a className='App-link' href='https://reactjs.org' target='_blank' rel='noopener noreferrer'>\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as Types from '../actions/types';\n\nconst initialState = {\n  products: [\n    {\n      id: 1,\n      name: 'apple'\n    }\n  ]\n};\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case Types.ADD_PRODUCTS: {\n      return {\n        ...state,\n        products: [...state.products, action.payload]\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import * as Types from '../actions/types';\nimport { HotelsType } from '../actions/types';\n\nconst initialState = {\n  loading: false,\n  items: [],\n  itemsCount: 0,\n  total: 0\n};\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case HotelsType.GET_ALL_REQUEST: {\n      return {\n        ...state,\n        loading: true\n      };\n    }\n\n    case HotelsType.GET_ALL_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n\n        items: action.payload.items,\n        itemsCount: action.payload.itemsCount,\n        total: action.payload.total\n      };\n    }\n\n    case HotelsType.GET_ALL_FAIL: {\n      return {\n        ...state,\n        loading: false\n      };\n    }\n\n    case HotelsType.ADD_HOTEL_REQUEST: {\n      return {\n        ...state,\n        loading: true\n      };\n    }\n\n    case HotelsType.ADD_HOTEL_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n\n        items: [...state.items, action.payload],\n        itemsCount: state.itemsCount + 1,\n        total: state.itemsCount + 1\n      };\n    }\n\n    case HotelsType.GET_ALL_FAIL: {\n      return {\n        ...state,\n        loading: false\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { getHotels, postHotel } from '../../api/hotels';\nimport { HotelsType } from '../actions/types';\n\nfunction* loadHotels(): Generator {\n  try {\n    const response: any = yield call(getHotels);\n    console.log(response);\n\n    yield put({\n      type: HotelsType.GET_ALL_SUCCESS,\n      payload: response.data\n    });\n  } catch (err) {}\n}\n\nfunction* watchLoadHotels() {\n  yield takeLatest(HotelsType.GET_ALL_REQUEST, loadHotels);\n}\n\nfunction* addHotel({ payload, type }: any): Generator {\n  try {\n    const response: any = yield call(postHotel, payload);\n    console.log(response);\n\n    if (response.ok) {\n      yield put({\n        type: HotelsType.ADD_HOTEL_SUCCESS,\n        payload: {\n          ...payload,\n          id: response.data.objectId\n        }\n      });\n    }\n  } catch (err) {}\n}\n\nfunction* watchAddHotel() {\n  yield takeLatest(HotelsType.ADD_HOTEL_REQUEST, addHotel);\n}\n\nexport default function* () {\n  yield all([watchLoadHotels(), watchAddHotel()]);\n}\n","import { all } from 'redux-saga/effects';\nimport hotelsSaga from './hotels';\n\nexport default function* () {\n  yield all([hotelsSaga()]);\n}\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\n// import thunk from 'redux-thunk';\n\nimport createSagaMiddleware from 'redux-saga';\n\nimport ProductsReducer from './reducers/productsReducer';\nimport HotelsReducer from './reducers/hotelsReducer';\n\nimport rootSaga from './sagas';\n\nconst sagaMiddleWare = createSagaMiddleware();\n\nconst rootReducer = combineReducers({\n  products: ProductsReducer,\n  hotels: HotelsReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer, applyMiddleware(sagaMiddleWare));\n\nsagaMiddleWare.run(rootSaga);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './state/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'http://192.168.0.148:3000'\n});\n\ninstance.interceptors.request.use(req => {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    req.headers = {\n      Authorization: `Bearer ${token}`\n    };\n  }\n  return req;\n});\n\ninstance.interceptors.response.use(\n  res => {\n    return res;\n  },\n  async err => {\n    const refresh = localStorage.getItem('refresh_token');\n    if (refresh) {\n      // await refreshToken();\n      // instance(err.config);\n    } else if (err.response.status === 401) {\n      window.location.replace('/login');\n    }\n    console.log(err.response);\n    return Promise.reject(err);\n  }\n);\n\nexport default {\n  instance\n};\n","export * from './endpoints';\nexport * from './types';\n","export * from './endpoints';\nexport * from './types';\n","import { AxiosResponse } from 'axios';\nimport Axios from '../axios';\nimport { LoginUserBody, LoginUserResponse, RegisterUserBody } from './types';\n\nexport const registerUser = (body: RegisterUserBody): Promise<any> => {\n  return Axios.instance.post('/register', body);\n};\n\nexport const loginUser = (body: LoginUserBody): Promise<AxiosResponse<LoginUserResponse>> => {\n  return Axios.instance.post('/login', body);\n};\n","import Axios from '../axios';\nimport { GetHotelsResponse, Hotel, PostHotelResponse } from './types';\n\nexport const getHotels = (): Promise<GetHotelsResponse> => {\n  return Axios.instance.get('/hotel');\n};\n\nexport const postHotel = (hotel: Hotel): Promise<PostHotelResponse> => {\n  return Axios.instance.post('/hotel', hotel);\n};\n"],"sourceRoot":""}